// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TESTKUSUM.Data;

#nullable disable

namespace TESTKUSUM.Migrations
{
    [DbContext(typeof(StudentDbContext))]
    [Migration("20230111094121_ccasdfghkjk")]
    partial class ccasdfghkjk
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            ConcurrencyStamp = "1",
                            Name = "Teacher",
                            NormalizedName = "Teacher"
                        },
                        new
                        {
                            Id = "c7b013f0-5201-4317-abd8-c211f91b7330",
                            ConcurrencyStamp = "2",
                            Name = "Student",
                            NormalizedName = "Student"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2d9d8997-bcb8-4ec9-8047-9562e0f75d22",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "6cc9459d-281c-4d85-b73b-b79fc0256043",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "a4dc1bd9-75c1-4a53-b616-42a9edfebba8",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "65223917-a64f-49b6-81c1-f54c88de0b21",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "0b2b8ee3-ef48-41e9-9793-37f9364ba107",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "c6a28bf5-090d-4ba3-8bdf-b494301a0a6d",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "ba3f2090-64de-48ee-9586-4aa2b02bfb68",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "11bef6cb-6c76-4e3b-a074-69dea565b837",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "b47d935c-0689-4112-9305-ae319fef394d",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        },
                        new
                        {
                            UserId = "dc98e0e3-f296-4f2a-aee3-45c0cc56dab2",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TESTKUSUM.Auth.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2d9d8997-bcb8-4ec9-8047-9562e0f75d22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39de9c07-7a98-4fec-b443-ccac34ef2084",
                            Email = "William@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WILLIAM@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEN2sQGWFfTFX1ApIoqXNwXGzIn0V+5pt8t3/YVbDXvhrvDg2aPVfodfoKX9b2hGSLg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e95f890b-e784-40ef-911d-93b5d0025d4a",
                            TwoFactorEnabled = false,
                            UserName = "William"
                        },
                        new
                        {
                            Id = "6cc9459d-281c-4d85-b73b-b79fc0256043",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "902028d4-4406-4575-8bca-87a227899061",
                            Email = "Ram@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "RAM@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJd8lEoDqZKccyZA1r3M5fpTvtKqsg9or2GNr7EreHwdB6pRixfNXVI6E6n29wL2OQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b9f95e01-7fb2-4893-ba51-cf41b5bca6ca",
                            TwoFactorEnabled = false,
                            UserName = "Ram"
                        },
                        new
                        {
                            Id = "a4dc1bd9-75c1-4a53-b616-42a9edfebba8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f76ce7d6-3387-4484-8cea-d518d79812a7",
                            Email = "Geta@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "GETA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDtuadDp4uhwjNruM7QWh19oCiH+lRwmdpKSoU//B+1poBokbS8gT/7zjZxKuFtlpQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a019119-0ac6-4d20-b790-3ad28a999f9f",
                            TwoFactorEnabled = false,
                            UserName = "Geta"
                        },
                        new
                        {
                            Id = "65223917-a64f-49b6-81c1-f54c88de0b21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77e54d3b-724e-489c-b252-aab7f1d0be3c",
                            Email = "Babita@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BABITA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGE3MONWxFaO+1FMw+cWhw/B+Q1KAP+USzzqYAE9Zvnfiemvqs6Gyn6U/XyYqscJuw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "191781b6-1bec-4034-9421-03edf2f2167f",
                            TwoFactorEnabled = false,
                            UserName = "Babita"
                        },
                        new
                        {
                            Id = "0b2b8ee3-ef48-41e9-9793-37f9364ba107",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "591e76c8-07a2-4e09-8bd7-591234860bef",
                            Email = "Sham@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "SHAM@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGbFgb+I5CzxJxZIeyVtgbaIJW1VINaaoR8byi7xiZ8i+RjHy7NZ2McOoAnuldimuw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "081f055f-89d3-481b-9ce0-72baebd3498b",
                            TwoFactorEnabled = false,
                            UserName = "Sham"
                        },
                        new
                        {
                            Id = "c6a28bf5-090d-4ba3-8bdf-b494301a0a6d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55473201-4ce8-4a93-bd0a-8771ecc57f2e",
                            Email = "Isaan@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ISAAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKEKmBkAsCSFngDD5jtb/kiq8kaZchvYeKVB3zflmhCW3ObMmeC03ujamepApo+tIA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2bd8030d-789f-4eb2-a336-56f6ea2866d2",
                            TwoFactorEnabled = false,
                            UserName = "Isaan"
                        },
                        new
                        {
                            Id = "ba3f2090-64de-48ee-9586-4aa2b02bfb68",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "156c4d35-fe88-49b9-8eee-0c699596859f",
                            Email = "Krina@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KRINA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJJ+7DdiD7XgscIbusaaluM1R4vtBGfUBFr/tmgAKrnGVSdKZ+l6A/OgRI+a5i81lw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e6fb0be1-5b42-4b12-a47d-96af82d86313",
                            TwoFactorEnabled = false,
                            UserName = "Krina"
                        },
                        new
                        {
                            Id = "11bef6cb-6c76-4e3b-a074-69dea565b837",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe7c24fc-da9c-4725-8e4d-367254dc9ba5",
                            Email = "Kajal@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KAJAL@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGo2OLsO6Umuv2ioJn2Sf3Hf7wA01Sa67VGcicKTLWWCwOrFuCOBsU3GBMpzSREamA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9e36a63c-fb61-4414-979d-444b31fcb920",
                            TwoFactorEnabled = false,
                            UserName = "Kajal"
                        },
                        new
                        {
                            Id = "b47d935c-0689-4112-9305-ae319fef394d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d6f0ae4-6a9f-4bf7-a2c9-601b073e0560",
                            Email = "Niki@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKI@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMnjRIksgSJES+hD87mKnxY4Xs3USFyQ1xEgxvYImve7DmuwVyW8+qJsHBxcO8gUUQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "35a57612-a51a-4905-828e-66e092d8d927",
                            TwoFactorEnabled = false,
                            UserName = "Niki"
                        },
                        new
                        {
                            Id = "dc98e0e3-f296-4f2a-aee3-45c0cc56dab2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8b274dbd-084e-4fd4-8599-133acf1c9603",
                            Email = "Kitu@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KITU@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHw3+TTnPgH4msX3+a65j/GOz//mf/+btiCSoAvIyBhq6uSrrQizJF/7dG+D5fOi1Q==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f0e9c10-277a-4108-bd5d-e86a432b7b48",
                            TwoFactorEnabled = false,
                            UserName = "Kitu"
                        });
                });

            modelBuilder.Entity("TESTKUSUM.Model.Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TESTKUSUM.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TESTKUSUM.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TESTKUSUM.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TESTKUSUM.Auth.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
